// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_ANON_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    storage: typeof localStorage !== 'undefined' ? localStorage : undefined,
    detectSessionInUrl: true,
    flowType: 'implicit'
  },
  global: {
    headers: {
      'Content-Type': 'application/json',
    },
    // Add a small delay on DB operations to ensure they complete properly
    fetch: (url: RequestInfo | URL, options?: RequestInit) => {
      return new Promise<Response>((resolve) => {
        setTimeout(() => {
          // Cast the fetch result to Promise<Response> to satisfy TypeScript
          resolve(fetch(url, options) as Promise<Response>);
        }, 50); // Small delay to ensure operations have time to complete
      });
    },
  },
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
});

// Helper functions for type casting
export const handleSupabaseResponse = <T>(data: any): T[] => {
  if (!data || data.error) {
    console.error('Supabase query error:', data?.error);
    return [];
  }
  
  if (!Array.isArray(data.data)) {
    console.warn('Expected array data from Supabase but received:', typeof data.data);
    return [];
  }
  
  return data.data as T[];
};

export const handleSupabaseResponseSingle = <T>(data: any): T | null => {
  if (!data || data.error) {
    console.error('Supabase query error:', data?.error);
    return null;
  }
  
  if (!data.data && data.data !== null) {
    console.warn('No data returned from Supabase');
    return null;
  }
  
  return data.data as T;
};
